source(DENSITY)
N = 500
K = 2
synth_data_1d = r_dpmix2(N)
y      = synth_data_1d$y
X      = synth_data_1d$X
params = synth_data_1d$param_mat
y_grid = seq(-3, 1.5, length.out = 1000)
# 6th sublot in Figure 3
df_yx = data.frame(x = X[,1], y = y)
ggplot(df_yx, aes(x = x, y = y)) + geom_point() + stat_smooth() + theme_bw()
# 1st subplot
x         = c(0.15, 0.25, 0.49, 0.75, 0.88, 0.95)
f_yx      = matrix(0, nrow = length(y_grid), ncol = length(x))
for(i in 1:length(x)) {
# f_yx[,i] = d_dpmix2(y_grid, x[i], -1 + 2 * x[i])
f_yx[,i] = d_dpmix2(y_grid = y_grid, x = c(x[i]))
}
df_y      = data.frame(x = y_grid, f_yx)
df_y_long = melt(df_y, id.vars = "x")
levels(df_y_long$variable) = c("x = 0.15", "x = 0.25", "x = 0.49",
"x = 0.75", "x = 0.88", "x = 0.95")
ggplot(df_y_long, aes(x, y = value)) + geom_point(size = 0.9) +
scale_x_continuous(breaks = seq(min(y_grid), max(y_grid), by = 1)) +
facet_wrap(~variable)
# (1.2) covariate-DEPENDENT vb
source(paste(COV_DEP, VARBDR, sep = '/'))         # load cov-dep varbdr.R
start_time <- Sys.time()
theta0 = varbdr(y, X, K)                   # store CAVI results
end_time <- Sys.time()
(diff_fix = end_time - start_time)
# generate plot overlays of the percentiles
source(DENSITY)
x = c(0.15, 0.25, 0.49, 0.75, 0.88, 0.95)
approx_d  = list(py_bouch)              # list of approx density functions
den_label = c("cov-dep")                # labels for each approx density
p_list2 = xQuantileDensity(x, params, d_dpmix2,
approx_d, den_label, theta1_list, K,
y_grid)
multiplot(plotlist = as.list(sapply(p_list2, function(x) x[1])), cols = 3)
# generate plot overlays of the percentiles
theta1_list    = list(theta0)
p_list2 = xQuantileDensity(x, params, d_dpmix2,
approx_d, den_label, theta1_list, K,
y_grid)
multiplot(plotlist = as.list(sapply(p_list2, function(x) x[1])), cols = 3)
source(UNI_CDE)
source(DENSITY)
N = 500
K = 2
synth_data_bimodal = r_binorm(N)
y      = synth_data_bimodal$y
X      = synth_data_bimodal$X
params = synth_data_bimodal$param_mat
y_grid = seq(-5, 5, length.out = 1000)
x         = c(-0.6745, 0, 0.6745)
f_yx      = matrix(0, nrow = length(y_grid), ncol = length(x))
for(i in 1:length(x)) {
f_yx[,i] = d_binorm(y_grid = y_grid, x = c(1, x[i]),
params = c(x[i] - 1.5, x[i] + 1.5))
}
df_y      = data.frame(x = y_grid, f_yx)
df_y_long = melt(df_y, id.vars = "x")
levels(df_y_long$variable) = c("x = -0.6745", "x = 0", "x = 0.6745")
ggplot(df_y_long, aes(x, y = value)) + geom_point(size = 0.9) +
scale_x_continuous(breaks = seq(min(y_grid), max(y_grid), by = 1)) +
facet_wrap(~variable)
source(DENSITY)
dim(X)
source(UNI_CDE)
source(DENSITY)
N = 500
K = 2
synth_data_bimodal = r_binorm(N)
y      = synth_data_bimodal$y
X      = synth_data_bimodal$X
params = synth_data_bimodal$param_mat
y_grid = seq(-5, 5, length.out = 1000)
x         = c(-0.6745, 0, 0.6745)
f_yx      = matrix(0, nrow = length(y_grid), ncol = length(x))
for(i in 1:length(x)) {
f_yx[,i] = d_binorm(y_grid = y_grid, x = x[i],
params = c(x[i] - 1.5, x[i] + 1.5))
}
for(i in 1:length(x)) {
f_yx[,i] = d_binorm(y_grid = y_grid, x = x[i])
}
df_y      = data.frame(x = y_grid, f_yx)
df_y_long = melt(df_y, id.vars = "x")
levels(df_y_long$variable) = c("x = -0.6745", "x = 0", "x = 0.6745")
ggplot(df_y_long, aes(x, y = value)) + geom_point(size = 0.9) +
scale_x_continuous(breaks = seq(min(y_grid), max(y_grid), by = 1)) +
facet_wrap(~variable)
source(UNI_CDE)
source(DENSITY)
N = 500
K = 2
synth_data_bimodal = r_binorm(N)
y      = synth_data_bimodal$y
X      = synth_data_bimodal$X
params = synth_data_bimodal$param_mat
y_grid = seq(-5, 5, length.out = 1000)
x         = c(-0.6745, 0, 0.6745)
f_yx      = matrix(0, nrow = length(y_grid), ncol = length(x))
for(i in 1:length(x)) {
f_yx[,i] = d_binorm(y_grid = y_grid, x = x[i])
}
df_y      = data.frame(x = y_grid, f_yx)
df_y_long = melt(df_y, id.vars = "x")
levels(df_y_long$variable) = c("x = -0.6745", "x = 0", "x = 0.6745")
ggplot(df_y_long, aes(x, y = value)) + geom_point(size = 0.9) +
scale_x_continuous(breaks = seq(min(y_grid), max(y_grid), by = 1)) +
facet_wrap(~variable)
# (1.2) covariate-DEPENDENT vb
source(paste(COV_DEP, VARBDR, sep = '/'))        # load cov-dep varbdr.R
# (1.2) covariate-DEPENDENT vb
source(paste(COV_DEP, VARBDR, sep = '/'))               # load cov-dep varbdr.R
theta1_2 = varbdr(y = y, X = X, K, intercept = TRUE)    # store CAVI results
plotELBO(theta1_2)
theta2      = list(theta1_2)      # list of var. params for each alg
source(DENSITY)
approx_d  = list(py_bouch)            # list of approx density functions
den_label = c("cov-dep")   # labels for each approx density
# params argument isn't used, function will redefine what it needs
# params as is corresponds to the parameters for the randomly generated x
# here, we care about the parameters associated with the quantiles
x         = c(-0.6745, 0, 0.6745)
y_grid = seq(-5, 5, length.out = 1000)
p_list3 = xQuantileDensity(x, params, d_binorm,
approx_d, den_label, theta2, K,
y_grid)
multiplot(plotlist = as.list(sapply(p_list3, function(x) x[1])), cols = 3)
theta1_2$beta_k
source(DENSITY)
x = c(0.15, 0.25, 0.49, 0.75, 0.88, 0.95)
approx_d  = list(py_bouch)              # list of approx density functions
den_label = c("cov-dep")                # labels for each approx density
p_list2 = xQuantileDensity(x, params, d_dpmix2,
approx_d, den_label, theta1_list, K,
y_grid)
theta2[[1]]$intercept
source(DENSITY)
approx_d  = list(py_bouch)            # list of approx density functions
den_label = c("cov-dep")   # labels for each approx density
# params argument isn't used, function will redefine what it needs
# params as is corresponds to the parameters for the randomly generated x
# here, we care about the parameters associated with the quantiles
x         = c(-0.6745, 0, 0.6745)
y_grid = seq(-5, 5, length.out = 1000)
p_list3 = xQuantileDensity(x, params, d_binorm,
approx_d, den_label, theta2, K,
y_grid)
multiplot(plotlist = as.list(sapply(p_list3, function(x) x[1])), cols = 3)
source(DENSITY)
approx_d  = list(py_bouch)            # list of approx density functions
den_label = c("cov-dep")   # labels for each approx density
# params argument isn't used, function will redefine what it needs
# params as is corresponds to the parameters for the randomly generated x
# here, we care about the parameters associated with the quantiles
x         = c(-0.6745, 0, 0.6745)
y_grid = seq(-5, 5, length.out = 1000)
p_list3 = xQuantileDensity(x, params, d_binorm,
approx_d, den_label, theta2, K,
y_grid)
multiplot(plotlist = as.list(sapply(p_list3, function(x) x[1])), cols = 3)
as.matrix(cbind(1, x))
as.matrix(cbind(1, x))[1,]
t(as.matrix(cbind(1, x))[1,])
t(as.matrix(cbind(1, x))[1,]) %*% theta1_2$gamma_k
t(as.matrix(cbind(1, x))[1,]) %*% theta1_2$gamma_k[,1]
length(as.matrix(cbind(1, x))[1,])
xtmp = (as.matrix(cbind(1, x))[1,])
xtmp
xtmp[2:length(xtmp)]
# generate plot overlays of the percentiles1
source(DENSITY)
approx_d  = list(py_bouch)            # list of approx density functions
den_label = c("cov-dep")   # labels for each approx density
# params argument isn't used, function will redefine what it needs
# params as is corresponds to the parameters for the randomly generated x
# here, we care about the parameters associated with the quantiles
x         = c(-0.6745, 0, 0.6745)
y_grid = seq(-5, 5, length.out = 1000)
p_list3 = xQuantileDensity(x, params, d_binorm,
approx_d, den_label, theta2, K,
y_grid)
multiplot(plotlist = as.list(sapply(p_list3, function(x) x[1])), cols = 3)
saveRDS(theta1_2, file = "bimodal_results/theta_N_500_K_2.RDS")
saveRDS(theta1_2, file = "bimodal_results/theta_N_500_K_2.RDS")
N = 1e3
K = 2
synth_data_bimodal = r_binorm(N)
y      = synth_data_bimodal$y
X      = synth_data_bimodal$X
params = synth_data_bimodal$param_mat
y_grid = seq(-5, 5, length.out = 1000)
x         = c(-0.6745, 0, 0.6745)
f_yx      = matrix(0, nrow = length(y_grid), ncol = length(x))
for(i in 1:length(x)) {
f_yx[,i] = d_binorm(y_grid = y_grid, x = x[i])
}
df_y      = data.frame(x = y_grid, f_yx)
df_y_long = melt(df_y, id.vars = "x")
levels(df_y_long$variable) = c("x = -0.6745", "x = 0", "x = 0.6745")
ggplot(df_y_long, aes(x, y = value)) + geom_point(size = 0.9) +
scale_x_continuous(breaks = seq(min(y_grid), max(y_grid), by = 1)) +
facet_wrap(~variable)
# run cavi ---------------------------------------------------------------------
# (1.1) covariate-INDEPENENT vb
# source(paste(COV_INDEP, VARBDR, sep = '/'))      # load cov-indep varbdr.R
# theta1_1 = varbdr(y = y, X = X, K = 3)               # store CAVI results
# (1.2) covariate-DEPENDENT vb
source(paste(COV_DEP, VARBDR, sep = '/'))               # load cov-dep varbdr.R
theta0 = varbdr(y = y, X = X, K, intercept = TRUE)    # store CAVI results
saveRDS(theta0, file = "bimodal_results/theta_N_1e3_K_2.RDS")
theta2_list      = list(theta0)      # list of var. params for each alg
source(DENSITY)
approx_d  = list(py_bouch)            # list of approx density functions
den_label = c("cov-dep")   # labels for each approx density
# params argument isn't used, function will redefine what it needs
# params as is corresponds to the parameters for the randomly generated x
# here, we care about the parameters associated with the quantiles
x         = c(-0.6745, 0, 0.6745)
y_grid = seq(-5, 5, length.out = 1000)
p_list3 = xQuantileDensity(x, params, d_binorm,
approx_d, den_label, theta2_list, K,
y_grid)
multiplot(plotlist = as.list(sapply(p_list3, function(x) x[1])), cols = 3)
theta1_500_2 = readRDS(file = "bimodal_results/theta_N_500_K_2.RDS")
theta1_1e3_2 = readRDS(file = "bimodal_results/theta_N_1e3_K_2.RDS")
theta1_500_2 = readRDS(file = "bimodal_results/theta_N_500_K_2.RDS")
overlayPlots = function(theta, K, den_label,
x = c(0.15, 0.25, 0.49, 0.75, 0.88, 0.95)) {
source(DENSITY)
n = length(theta)
approx_d  = rep(list(py_bouch), n)
# approx_d = list(py_bouch, py_bouch, py_bouch, py_bouch)
# den_label = c("cov-dep-1", "cov-dep-2", "cov-dep-3", "cov-dep-4")
p_list2 = xQuantileDensity(x, params, d_dpmix2,
approx_d, den_label, theta, K,
y_grid)
p = multiplot(plotlist = as.list(sapply(p_list2, function(x) x[1])),
cols = 3)
return(p)
}
overlayPlots(theta = list(theta1_500_2, theta1_1e3_2),
K = 2, den_label = c("N=500", "N=1e3"))
overlayPlots = function(theta, K, den_label,
x = c(0.15, 0.25, 0.49, 0.75, 0.88, 0.95)) {
source(DENSITY)
n = length(theta)
approx_d  = rep(list(py_bouch), n)
# approx_d = list(py_bouch, py_bouch, py_bouch, py_bouch)
# den_label = c("cov-dep-1", "cov-dep-2", "cov-dep-3", "cov-dep-4")
p_list2 = xQuantileDensity(x, params, d_binorm,
approx_d, den_label, theta, K,
y_grid)
p = multiplot(plotlist = as.list(sapply(p_list2, function(x) x[1])),
cols = 3)
return(p)
}
overlayPlots(theta = list(theta1_500_2, theta1_1e3_2),
K = 2, den_label = c("N=500", "N=1e3"))
overlayPlots(theta = list(theta1_500_2, theta1_1e3_2),
K = 2, den_label = c("N=500", "N=1e3"))
overlayPlots(theta = list(theta1_500_2, theta1_1e3_2),
K = 2, den_label = c("N=500", "N=1e3"))
overlayPlots = function(theta, K, den_label,
x = c(-0.6745, 0, 0.6745)) {
source(DENSITY)
n = length(theta)
approx_d  = rep(list(py_bouch), n)
# approx_d = list(py_bouch, py_bouch, py_bouch, py_bouch)
# den_label = c("cov-dep-1", "cov-dep-2", "cov-dep-3", "cov-dep-4")
p_list2 = xQuantileDensity(x, params, d_binorm,
approx_d, den_label, theta, K,
y_grid)
p = multiplot(plotlist = as.list(sapply(p_list2, function(x) x[1])),
cols = 3)
return(p)
}
overlayPlots(theta = list(theta1_500_2, theta1_1e3_2),
K = 2, den_label = c("N=500", "N=1e3"))
ncol(X)
overlayPlots(theta = list(theta1_500_2, theta1_1e3_2),
K = 2, den_label = c("N=500", "N=1e3"))
overlayPlots(theta = list(theta1_500_2, theta1_1e3_2),
K = 2, den_label = c("N=500", "N=1e3"))
overlayPlots(theta = list(theta1_500_2, theta1_1e3_2),
K = 2, den_label = c("N=500", "N=1e3"))
overlayPlots(theta = list(theta1_500_2, theta1_1e3_2),
K = 2, den_label = c("N=500", "N=1e3"))
overlayPlots(theta = list(theta1_500_2, theta1_1e3_2),
K = 2, den_label = c("N=500", "N=1e3"))
# overlay approximations for varying values of N -------------------------------
library(dplyr)
overlayPlots(theta = list(theta1_500_2, theta1_1e3_2),
K = 2, den_label = c("N=500", "N=1e3"))
overlayPlots(theta = list(theta1_500_2, theta1_1e3_2),
K = 2, den_label = c("N=500", "N=1e3"))
overlayPlots(theta = list(theta1_500_2, theta1_1e3_2),
K = 2, den_label = c("N=500", "N=1e3"))
p = ggplot(approx_df_long, aes(x = y, y = value, colour = variable)) +
geom_line(size = 0.8, aes(linetype = factor(approx_df_long$variable))) +
labs(x = "y", y = "p(y)") + theme_bw() +
theme(legend.justification = c(1, 1.05), legend.position = c(1, 1)) +
theme(legend.title = element_blank())
overlayPlots(theta = list(theta1_500_2, theta1_1e3_2),
K = 2, den_label = c("N=500", "N=1e3"))
overlayPlots(theta = list(theta1_500_2, theta1_1e3_2),
K = 2, den_label = c("N=500", "N=1e3"))
overlayPlots(theta = list(theta1_500_2, theta1_1e3_2),
K = 2, den_label = c("N=500", "N=1e3"))
overlayPlots(theta = list(theta1_500_2, theta1_1e3_2),
K = 2, den_label = c("N=500", "N=1e3"))
overlayPlots(theta = list(theta1_500_2, theta1_1e3_2),
K = 2, den_label = c("N=500", "N=1e3"))
overlayPlots(theta = list(theta1_500_2, theta1_1e3_2),
K = 2, den_label = c("N=500", "N=1e3"))
source(UNI_CDE)
source(DENSITY)
N = 1e4
K = 2
synth_data_bimodal = r_binorm(N)
y      = synth_data_bimodal$y
X      = synth_data_bimodal$X
params = synth_data_bimodal$param_mat
y_grid = seq(-5, 5, length.out = 1000)
x         = c(-0.6745, 0, 0.6745)
f_yx      = matrix(0, nrow = length(y_grid), ncol = length(x))
for(i in 1:length(x)) {
f_yx[,i] = d_binorm(y_grid = y_grid, x = x[i])
}
df_y      = data.frame(x = y_grid, f_yx)
df_y_long = melt(df_y, id.vars = "x")
levels(df_y_long$variable) = c("x = -0.6745", "x = 0", "x = 0.6745")
ggplot(df_y_long, aes(x, y = value)) + geom_point(size = 0.9) +
scale_x_continuous(breaks = seq(min(y_grid), max(y_grid), by = 1)) +
facet_wrap(~variable)
# run cavi ---------------------------------------------------------------------
# (1.1) covariate-INDEPENENT vb
# source(paste(COV_INDEP, VARBDR, sep = '/'))      # load cov-indep varbdr.R
# theta1_1 = varbdr(y = y, X = X, K = 3)               # store CAVI results
# (1.2) covariate-DEPENDENT vb
source(paste(COV_DEP, VARBDR, sep = '/'))               # load cov-dep varbdr.R
theta0 = varbdr(y = y, X = X, K, intercept = TRUE)    # store CAVI results
N = 1e4
K = 2
synth_data_bimodal = r_binorm(N)
y      = synth_data_bimodal$y
X      = synth_data_bimodal$X
params = synth_data_bimodal$param_mat
y_grid = seq(-5, 5, length.out = 1000)
x         = c(-0.6745, 0, 0.6745)
f_yx      = matrix(0, nrow = length(y_grid), ncol = length(x))
for(i in 1:length(x)) {
f_yx[,i] = d_binorm(y_grid = y_grid, x = x[i])
}
df_y      = data.frame(x = y_grid, f_yx)
df_y_long = melt(df_y, id.vars = "x")
levels(df_y_long$variable) = c("x = -0.6745", "x = 0", "x = 0.6745")
ggplot(df_y_long, aes(x, y = value)) + geom_point(size = 0.9) +
scale_x_continuous(breaks = seq(min(y_grid), max(y_grid), by = 1)) +
facet_wrap(~variable)
# run cavi ---------------------------------------------------------------------
# (1.1) covariate-INDEPENENT vb
# source(paste(COV_INDEP, VARBDR, sep = '/'))      # load cov-indep varbdr.R
# theta1_1 = varbdr(y = y, X = X, K = 3)               # store CAVI results
# (1.2) covariate-DEPENDENT vb
source(paste(COV_DEP, VARBDR, sep = '/'))               # load cov-dep varbdr.R
theta0 = varbdr(y = y, X = X, K, intercept = TRUE)    # store CAVI results
N = 1e4
K = 2
synth_data_bimodal = r_binorm(N)
y      = synth_data_bimodal$y
X      = synth_data_bimodal$X
params = synth_data_bimodal$param_mat
y_grid = seq(-5, 5, length.out = 1000)
x         = c(-0.6745, 0, 0.6745)
f_yx      = matrix(0, nrow = length(y_grid), ncol = length(x))
for(i in 1:length(x)) {
f_yx[,i] = d_binorm(y_grid = y_grid, x = x[i])
}
df_y      = data.frame(x = y_grid, f_yx)
df_y_long = melt(df_y, id.vars = "x")
levels(df_y_long$variable) = c("x = -0.6745", "x = 0", "x = 0.6745")
ggplot(df_y_long, aes(x, y = value)) + geom_point(size = 0.9) +
scale_x_continuous(breaks = seq(min(y_grid), max(y_grid), by = 1)) +
facet_wrap(~variable)
# run cavi ---------------------------------------------------------------------
# (1.1) covariate-INDEPENENT vb
# source(paste(COV_INDEP, VARBDR, sep = '/'))      # load cov-indep varbdr.R
# theta1_1 = varbdr(y = y, X = X, K = 3)               # store CAVI results
# (1.2) covariate-DEPENDENT vb
source(paste(COV_DEP, VARBDR, sep = '/'))               # load cov-dep varbdr.R
theta0 = varbdr(y = y, X = X, K, intercept = TRUE)    # store CAVI results
saveRDS(theta0, file = "bimodal_results/theta_N_1e4_K_2.RDS")
theta2_list      = list(theta0)      # list of var. params for each alg
source(DENSITY)
approx_d  = list(py_bouch)            # list of approx density functions
den_label = c("cov-dep")   # labels for each approx density
# params argument isn't used, function will redefine what it needs
# params as is corresponds to the parameters for the randomly generated x
# here, we care about the parameters associated with the quantiles
x         = c(-0.6745, 0, 0.6745)
y_grid = seq(-5, 5, length.out = 1000)
p_list3 = xQuantileDensity(x, params, d_binorm,
approx_d, den_label, theta2_list, K,
y_grid)
multiplot(plotlist = as.list(sapply(p_list3, function(x) x[1])), cols = 3)
theta2_list      = list(theta0)      # list of var. params for each alg
source(DENSITY)
approx_d  = list(py_bouch)            # list of approx density functions
den_label = c("cov-dep")   # labels for each approx density
# params argument isn't used, function will redefine what it needs
# params as is corresponds to the parameters for the randomly generated x
# here, we care about the parameters associated with the quantiles
x         = c(-0.6745, 0, 0.6745)
y_grid = seq(-5, 5, length.out = 1000)
p_list3 = xQuantileDensity(x, params, d_binorm,
approx_d, den_label, theta2_list, K,
y_grid)
multiplot(plotlist = as.list(sapply(p_list3, function(x) x[1])), cols = 3)
theta2_list      = list(theta0)      # list of var. params for each alg
source(DENSITY)
approx_d  = list(py_bouch)            # list of approx density functions
den_label = c("cov-dep")   # labels for each approx density
# params argument isn't used, function will redefine what it needs
# params as is corresponds to the parameters for the randomly generated x
# here, we care about the parameters associated with the quantiles
x         = c(-0.6745, 0, 0.6745)
y_grid = seq(-5, 5, length.out = 1000)
p_list3 = xQuantileDensity(x, params, d_binorm,
approx_d, den_label, theta2_list, K,
y_grid)
multiplot(plotlist = as.list(sapply(p_list3, function(x) x[1])), cols = 3)
multiplot(plotlist = as.list(sapply(p_list3, function(x) x[1])), cols = 3)
overlayPlots = function(theta, K, den_label,
x = c(-0.6745, 0, 0.6745)) {
source(DENSITY)
n = length(theta)
approx_d  = rep(list(py_bouch), n)
# approx_d = list(py_bouch, py_bouch, py_bouch, py_bouch)
# den_label = c("cov-dep-1", "cov-dep-2", "cov-dep-3", "cov-dep-4")
p_list2 = xQuantileDensity(x, params, d_binorm,
approx_d, den_label, theta, K,
y_grid)
p = multiplot(plotlist = as.list(sapply(p_list2, function(x) x[1])),
cols = 3)
return(p)
}
overlayPlots(theta = list(theta1_500_2, theta1_1e3_2),
K = 2, den_label = c("N=500", "N=1e3", "N=1e4"))
overlayPlots(theta = list(theta1_500_2, theta1_1e3_2, theta1_1e4_2),
K = 2, den_label = c("N=500", "N=1e3", "N=1e4"))
theta1_1e4_2 = readRDS(file = "bimodal_results/theta_N_1e4_K_2.RDS")
overlayPlots(theta = list(theta1_500_2, theta1_1e3_2, theta1_1e4_2),
K = 2, den_label = c("N=500", "N=1e3", "N=1e4"))
theta2_list      = list(theta1_500_2)      # list of var. params for each alg
source(DENSITY)
approx_d  = list(py_bouch)            # list of approx density functions
den_label = c("cov-dep")   # labels for each approx density
# params argument isn't used, function will redefine what it needs
# params as is corresponds to the parameters for the randomly generated x
# here, we care about the parameters associated with the quantiles
x         = c(-0.6745, 0, 0.6745)
y_grid = seq(-5, 5, length.out = 1000)
p_list3 = xQuantileDensity(x, params, d_binorm,
approx_d, den_label, theta2_list, K,
y_grid)
multiplot(plotlist = as.list(sapply(p_list3, function(x) x[1])), cols = 3)
multiplot(plotlist = as.list(sapply(p_list3, function(x) x[1])), cols = 3)
theta2_list      = list(theta1_1e3_2)      # list of var. params for each alg
source(DENSITY)
approx_d  = list(py_bouch)            # list of approx density functions
den_label = c("cov-dep")   # labels for each approx density
# params argument isn't used, function will redefine what it needs
# params as is corresponds to the parameters for the randomly generated x
# here, we care about the parameters associated with the quantiles
x         = c(-0.6745, 0, 0.6745)
y_grid = seq(-5, 5, length.out = 1000)
p_list3 = xQuantileDensity(x, params, d_binorm,
approx_d, den_label, theta2_list, K,
y_grid)
multiplot(plotlist = as.list(sapply(p_list3, function(x) x[1])), cols = 3)
multiplot(plotlist = as.list(sapply(p_list3, function(x) x[1])), cols = 3)
theta2_list      = list(theta1_1e4_2)      # list of var. params for each alg
source(DENSITY)
approx_d  = list(py_bouch)            # list of approx density functions
den_label = c("cov-dep")   # labels for each approx density
# params argument isn't used, function will redefine what it needs
# params as is corresponds to the parameters for the randomly generated x
# here, we care about the parameters associated with the quantiles
x         = c(-0.6745, 0, 0.6745)
y_grid = seq(-5, 5, length.out = 1000)
p_list3 = xQuantileDensity(x, params, d_binorm,
approx_d, den_label, theta2_list, K,
y_grid)
multiplot(plotlist = as.list(sapply(p_list3, function(x) x[1])), cols = 3)
multiplot(plotlist = as.list(sapply(p_list3, function(x) x[1])), cols = 3)
multiplot(plotlist = as.list(sapply(p_list3, function(x) x[1])), cols = 3)
theta_2e4_2 = readRDS(file = "dp_results/theta_N_2e4_K_2.RDS") # N = 2e4, K = 2
theta1_list    = list(theta_2e4_2)
source(DENSITY)
x = c(0.15, 0.25, 0.49, 0.75, 0.88, 0.95)
approx_d  = list(py_bouch)              # list of approx density functions
den_label = c("cov-dep")                # labels for each approx density
p_list2 = xQuantileDensity(x, params, d_dpmix2,
approx_d, den_label, theta1_list, K,
y_grid)
multiplot(plotlist = as.list(sapply(p_list2, function(x) x[1])), cols = 3)
multiplot(plotlist = as.list(sapply(p_list2, function(x) x[1])), cols = 3)
